import os
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ .env
load_dotenv()
HUGGINGFACE_API_TOKEN = os.getenv("HF_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("7809664280:AAFxh7WtpuO8Kmplek6bMpP3bus_ctnoovs")

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
MAX_FREE_GENERATIONS = 3
user_limits = defaultdict(lambda: {"count": 0, "last_reset": datetime.now()})

def reset_if_needed(user_data):
    if datetime.now() - user_data["last_reset"] > timedelta(days=1):
        user_data["count"] = 0
        user_data["last_reset"] = datetime.now()

# –ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = user_limits[user_id]
    reset_if_needed(user_data)

    if user_data["count"] >= MAX_FREE_GENERATIONS:
        await update.message.reply_text(
            "üö´ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /buy"
        )
        return

    prompt = " ".join(context.args) or "a futuristic city at sunset"
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... ‚è≥")

    print(f"[{datetime.now()}] User {user_id} prompt: {prompt}")

    response = requests.post(
        "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0",
        headers={"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"},
        json={"inputs": prompt}
    )

    if response.status_code != 200:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}")
        return

    image_data = response.content
    user_data["count"] += 1

    await update.message.reply_photo(photo=image_data, caption="–í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé®")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
        "`/generate [—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å]`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `/generate –∫–æ—Ç –≤ –æ—á–∫–∞—Ö –≤ –∫–æ—Å–º–æ—Å–µ`\n\n"
        "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å\n"
        "üíé –•–æ—á–µ—à—å –±–æ–ª—å—à–µ? –ö–æ–º–∞–Ω–¥–∞ /buy\n"
        "üìä –°—Ç–∞—Ç—É—Å: /me",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /buy
async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíé *–¢–∞—Ä–∏—Ñ—ã:*\n"
        "‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ–Ω—å\n"
        "‚Äî –ü—Ä–µ–º–∏—É–º: –æ—Ç 100‚ÇΩ/–º–µ—Å ‚Äî –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤\n\n"
        "üõí –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ Boosty: https://boosty.to/—Ç–≤–æ—è_—Å—Å—ã–ª–∫–∞\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ /activate –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
        parse_mode="Markdown"
    )

# –ö–æ–º–∞–Ω–¥–∞ /me
async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = user_limits[user_id]
    reset_if_needed(user_data)

    remaining = MAX_FREE_GENERATIONS - user_data["count"]
    await update.message.reply_text(
        f"üë§ –°—Ç–∞—Ç—É—Å:\n"
        f"–°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data['count']} / {MAX_FREE_GENERATIONS}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"
    )

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("generate", generate_image))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("me", me))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
