import os
import json
import requests
from datetime import datetime, timedelta
from collections import defaultdict
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import signal

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
HF_TOKEN = os.environ["HF_TOKEN"]
HF_API_URL_TEXT = "https://api-inference.huggingface.co/models/ai-forever/rugpt3medium_based_on_gpt2"


HF_API_URL_IMAGE = "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0"
TELEGRAM_BOT_TOKEN = "7809664280:AAFxh7WtpuO8Kmplek6bMpP3bus_ctnoovs"


if not HF_TOKEN or not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è HF_TOKEN –∏–ª–∏ TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

HEADERS = {"Authorization": f"Bearer {HF_TOKEN}"}

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö ---

USER_DATA_FILE = "user_data.json"
MAX_FREE_GENERATIONS = 3

def load_user_data():
    try:
        with open(USER_DATA_FILE, "r") as f:
            data = json.load(f)
            for user_id, info in data.items():
                info["last_reset"] = datetime.fromisoformat(info["last_reset"])
                if "premium" not in info:
                    info["premium"] = False
            return defaultdict(lambda: {"count": 0, "last_reset": datetime.now(), "premium": False}, data)
    except (FileNotFoundError, json.JSONDecodeError):
        return defaultdict(lambda: {"count": 0, "last_reset": datetime.now(), "premium": False})

def save_user_data():
    with open(USER_DATA_FILE, "w") as f:
        json.dump({
            str(uid): {
                "count": info["count"],
                "last_reset": info["last_reset"].isoformat(),
                "premium": info.get("premium", False)
            } for uid, info in user_limits.items()
        }, f, indent=2)

def reset_if_needed(user_data):
    if datetime.now() - user_data["last_reset"] > timedelta(days=1):
        user_data["count"] = 0
        user_data["last_reset"] = datetime.now()
        save_user_data()

user_limits = load_user_data()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ–±—â–µ–Ω–∏—è.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/generate [—Ç–µ–∫—Å—Ç] ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º."
    )

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_limits[user_id]
    reset_if_needed(user_data)

    if not user_data.get("premium", False) and user_data["count"] >= MAX_FREE_GENERATIONS:
        await update.message.reply_text(
            "üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω.\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /buy –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo"
        )
        return

    prompt = " ".join(context.args) if context.args else "a futuristic city at sunset"
    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... ‚è≥")

    response = requests.post(
        HF_API_URL_IMAGE,
        headers=HEADERS,
        json={"inputs": prompt}
    )

    if response.status_code != 200:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ API: {response.status_code}\n{response.text}")
        return

    image_data = response.content
    user_data["count"] += 1
    save_user_data()

    await update.message.reply_photo(photo=image_data, caption="–í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! üé®")

VALID_PROMOCODES = {"SUPERPREMIUM2025", "VIPACCESS"}

async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_limits[user_id]

    if not context.args:
        await update.message.reply_text("‚ùóÔ∏è –£–∫–∞–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /promo SUPERPREMIUM2025")
        return

    code = context.args[0].strip().upper()

    if code in VALID_PROMOCODES:
        if user_data.get("premium", False):
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å!")
        else:
            user_data["premium"] = True
            save_user_data()
            await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å ‚Äî –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíé *–¢–∞—Ä–∏—Ñ—ã:*\n"
        "‚Äî –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–µ–Ω—å\n"
        "‚Äî –ü—Ä–µ–º–∏—É–º: –æ—Ç 100‚ÇΩ/–º–µ—Å ‚Äî –±–æ–ª—å—à–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤\n\n"
        "üõí –û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ –Ω–∞ Boosty: https://boosty.to/—Ç–≤–æ—è_—Å—Å—ã–ª–∫–∞\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ /activate –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.",
        parse_mode="Markdown"
    )

async def me(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = user_limits[user_id]
    reset_if_needed(user_data)

    if user_data.get("premium", False):
        await update.message.reply_text(
            f"üë§ –°—Ç–∞—Ç—É—Å: –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üíé\n"
            f"–£ —Ç–µ–±—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!"
        )
    else:
        remaining = MAX_FREE_GENERATIONS - user_data["count"]
        next_reset = user_data["last_reset"] + timedelta(days=1)
        time_left = next_reset - datetime.now()

        hours, remainder = divmod(int(time_left.total_seconds()), 3600)
        minutes = remainder // 60

        await update.message.reply_text(
            f"üë§ –°—Ç–∞—Ç—É—Å:\n"
            f"–°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_data['count']} / {MAX_FREE_GENERATIONS}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
            f"‚è≥ –î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {hours} —á {minutes} –º–∏–Ω"
        )

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ ruGPT ---

def generate_response(prompt: str) -> str:
    payload = {"inputs": prompt}
    response = requests.post(HF_API_URL_TEXT, headers=HEADERS, json=payload)
    if response.status_code == 200:
        try:
            return response.json()[0]["generated_text"]
        except Exception:
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –º–æ–¥–µ–ª–∏."
    else:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code}"

async def reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    response = generate_response(user_input)
    await update.message.reply_text(response)

# --- Graceful shutdown ---

def save_and_exit(*args):
    print("–°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º...")
    save_user_data()
    exit(0)

signal.signal(signal.SIGINT, save_and_exit)
signal.signal(signal.SIGTERM, save_and_exit)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    app.add_handler(CommandHandler("generate", generate_image))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("promo", promo))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("me", me))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥) —á–µ—Ä–µ–∑ ruGPT
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, reply))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
